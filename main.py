import asyncio

from settings import TOKEN, ADMIN_CHAT_ID

from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes
)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
DEPARTURE, DESTINATION, CARGO, DATETIME, CONTACT = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
                                    "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel\n"
                                    "–î–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /help")
    return DEPARTURE

async def get_departure(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['departure'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–∫—É(–∏) –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∑–∞–ø—è—Ç–æ–π):")
    return DESTINATION

async def get_destination(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['destination'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞:")
    return CARGO

async def get_cargo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['cargo'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")
    return DATETIME

async def get_datetime(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['datetime'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email:")
    return CONTACT

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['contact'] = update.message.text
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    departure = context.user_data.get('departure', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    destination = context.user_data.get('destination', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    cargo = context.user_data.get('cargo', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    datetime_val = context.user_data.get('datetime', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    contact = context.user_data.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_chat_id = update.effective_chat.id

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    formatted_message = (
        f"üì¶ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É:\n\n"
        f"üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {departure}\n"
        f"üìç –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ(—è): {destination}\n"
        f"üì¶ –¢–∏–ø –≥—Ä—É–∑–∞: {cargo}\n"
        f"‚è≥ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime_val}\n"
        f"‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n"
        f"üÜî Chat ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_chat_id}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=formatted_message)
    await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <chat_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>
async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply <chat_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    try:
        target_chat_id = int(args[0])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π chat_id.")
        return
    reply_text = " ".join(args[1:])
    await context.bot.send_message(chat_id=target_chat_id, text=f"–ê–¥–º–∏–Ω: {reply_text}")
    await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        "/start - –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏\n"
        "/help - –≤—ã–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    )
    await update.message.reply_text(help_text)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    admin_help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        "/reply <chat_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ> - –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "/admin_help - –≤—ã–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    )
    await update.message.reply_text(admin_help_text)

def main():
    # –ó–∞–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            DEPARTURE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_departure)],
            DESTINATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_destination)],
            CARGO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_cargo)],
            DATETIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_datetime)],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler('reply', admin_reply))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('admin_help', admin_help))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
